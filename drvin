package org.bisag.ocbis.controllers;

import java.io.File;
import java.io.OutputStream;
import java.util.Base64;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.apache.commons.io.FileUtils;
import org.bisag.ocbis.models.MeetingRequestEntity;
import org.bisag.ocbis.models.MemberEntity;
import org.bisag.ocbis.payloads.request.EncryptedRequest;
import org.bisag.ocbis.payloads.request.LongId;
import org.bisag.ocbis.payloads.response.EncryptedResponse;
import org.bisag.ocbis.repository.CgpbisRepo;
import org.bisag.ocbis.services.CgpbisService;
import org.bisag.ocbis.services.MemberService;
import org.bisag.ocbis.utils.FileValidator;
import org.bisag.ocbis.utils.Json;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import jakarta.validation.Valid;

@RestController
@CrossOrigin("*")
@RequestMapping("/cgpbis")
public class CgpbisController {

    @Autowired
    private CgpbisService cgpbisService;

    @Autowired
    private MemberService memberService;

    @Autowired
    private CgpbisRepo cgpbisRepo;

    @Value("${fileServerPath}")
    String fileServerPath;

    @PostMapping("/save-meeting")
    public <json> EncryptedResponse saveFspDetail(
            @Valid @RequestBody EncryptedRequest req) throws Exception {

        var body = Json.deserialize(MeetingRequestEntity.class, req.getData());
        System.out.println("agenda" + body.getAgenda());
        UUID uuid = UUID.randomUUID();
        var pdfPathTenth = fileServerPath + "/documents/" + uuid + ".pdf";
        File fileTenth = new File(pdfPathTenth);
        byte[] agendaBytes = Base64.getDecoder().decode(body.getAgenda().split(",")[1]);
        System.out.println("agendabytes" + agendaBytes.length);
        
        FileValidator.validateFileSize(agendaBytes, 5);
        
        try (OutputStream stream = FileUtils.openOutputStream(fileTenth)) {
            stream.write(agendaBytes);
            body.setAgenda(uuid.toString());
        } 
        try {
            cgpbisService.saveMeeting(body);
            return new EncryptedResponse("success");
        } catch (Exception e) {
            e.printStackTrace();
            return new EncryptedResponse("error");
        }
    }

    @PostMapping("/get-all-meetings")
    public <json> EncryptedResponse getAllMeetings() throws Exception {

        List<MeetingRequestEntity> allMeetings = cgpbisService.getAllMeetings();

        return new EncryptedResponse(allMeetings);
    }   

    @PostMapping("/get-meeting-byid")
    public EncryptedResponse meetingByID(@RequestBody EncryptedRequest req) throws Exception {
        var body = Json.deserialize(LongId.class, req.getData());

        Optional<MeetingRequestEntity> meetingOptional = cgpbisService.getMeetingById(body.id());

        if (meetingOptional.isPresent()) {

            MeetingRequestEntity meeting = meetingOptional.get();

            return new EncryptedResponse(meeting);
        } else {

            return new EncryptedResponse("Meeting not found");
        }
    }

    @PostMapping("/update-meeting-byid")
    public EncryptedResponse updateMeeting(@RequestBody EncryptedRequest req) throws Exception {
        try {
            var meeting = Json.deserialize(MeetingRequestEntity.class, req.getData());
            cgpbisService.updateMeeting(meeting.getId(), meeting);
            return new EncryptedResponse("success");
        } catch (Exception e) {
            e.printStackTrace();
            return new EncryptedResponse("error");
        }
    }

    @PostMapping("/delete-meeting-byid")
    public EncryptedResponse deleteMeetingDetails(@RequestBody EncryptedRequest req)
            throws Exception {
        var body = Json.deserialize(LongId.class, req.getData());
        cgpbisService.deleteMeeting(body.id());
        return new EncryptedResponse("deleted Successfully");
    }

    @PostMapping("/addMember")
    public <json> EncryptedResponse addMember(@Valid @RequestBody EncryptedRequest req) throws Exception {
        var body = Json.deserialize(MemberEntity.class, req.getData());
        try {
            memberService.saveMember(body);
            return new EncryptedResponse("success");
        } catch (Exception e) {
            return new EncryptedResponse("error");
        }
    }
    @PostMapping("/get-all-members")
    public <json> EncryptedResponse getAllMembers() throws Exception {
        List<MemberEntity> allMembers = memberService.getAllMembers();
        return new EncryptedResponse(allMembers);
     }
    
    
}
